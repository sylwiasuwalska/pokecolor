{"version":3,"sources":["ring.svg","components/Store.js","components/Header.js","components/Pagination.js","colors.js","components/Filtering.js","components/Sorting.js","components/PokeContainer.js","components/ButtonContainer.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","stateContext","createContext","colorContext","Store","children","useState","setLoading","error","setError","dataPreparing","setDataPreparing","color","setColor","pokeState","setPokeState","useEffect","axios","get","then","response","data","pokeDataFetch","catch","responsesSpecies","pokemon_species","map","currentElement","index","url","responsesPokemon","varieties","currEl","ind","pokemon","name","id","baseExperience","base_experience","types","property","type","abilities","ability","Promise","all","flat","Provider","value","Header","props","Row","Col","Pagination","rowsPerPage","totalRows","loadCurrentPage","currentPage","pageNumbers","i","Math","ceil","push","getFirstAndLastItem","number","array","length","sm","md","className","onClick","colors","Filtering","setFilterWord","setCurrentPage","colorName","find","element","placeholder","onChange","e","target","Sorting","setData","fieldToSort","setFieldToSort","sortDirection","setSortDirection","sortByField","field","sortedData","slice","sort","a","b","getSortIndicator","undefined","PokeContainer","useContext","state","pokeData","setPokeData","itemsPerPage","filterWord","listItems","key","filteredData","Object","values","filter","toString","search","toLowerCase","filterList","src","loader","alt","height","width","pageNumber","indexOfLastItem","indexOfFirstItem","currentItems","colorElement","style","backgroundColor","onError","onerror","renderTableData","ButtonContainer","buttonList","Button","variant","size","borderColor","borderRadius","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.860e907b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ring.4c461beb.svg\";","import React, {createContext, useEffect, useState} from \"react\";\nimport axios from \"axios\";\n\nconst Store = ({children}) => {\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(false);\n    const [dataPreparing, setDataPreparing] = useState(true);\n    const [color, setColor] = useState(1)\n    const [pokeState, setPokeState] = useState({});\n\n    //TODO: decide what to do with loading\n\n    useEffect(() => {\n        setDataPreparing(true)\n        axios\n            .get(`https://pokeapi.co/api/v2/pokemon-color/${color}/`)\n            .then((response) => {\n                setLoading(false);\n                setError(\"\");\n                return response.data;\n            })\n            .then((data) => {\n                pokeDataFetch(data);\n            })\n            .catch(() => {\n                setLoading(false);\n                setPokeState(\"\");\n                setError(true);\n            });\n    }, [color]);\n\n    //TODO: refactor blocks of code as functions\n    const pokeDataFetch = (data) => {\n        const responsesSpecies = [];\n\n        data.pokemon_species.map((currentElement, index) => {\n            responsesSpecies[index] = axios\n                .get(currentElement.url)\n                .then((response) => {\n                    const responsesPokemon = [];\n                    response.data.varieties.map((currEl, ind) => {\n                        responsesPokemon[ind] = axios\n                            .get(currEl.pokemon.url)\n                            .then((response) => {\n                                const name = response.data.name;\n                                const id = response.data.id;\n                                const baseExperience = response.data.base_experience;\n                                const types = response.data.types.map(\n                                    (property) => property.type.name\n                                );\n                                const abilities = response.data.abilities.map(\n                                    (property) => property.ability.name\n                                );\n                                return {name, id, baseExperience, types, abilities};\n                            });\n                    });\n\n                    return Promise.all(responsesPokemon).then((data) => {\n                        return data;\n                    });\n                })\n\n                .catch(() => {\n                    setError(true);\n                });\n        });\n\n        Promise.all(responsesSpecies).then((data) => {\n           setPokeState(data.flat());\n           setDataPreparing(false)\n        });\n    };\n\n    return (\n        <colorContext.Provider value={[color, setColor]}>\n                <stateContext.Provider value={[pokeState, error, dataPreparing]}>\n                        {children}\n                </stateContext.Provider>\n        </colorContext.Provider>\n    );\n};\n\nexport const stateContext = createContext();\nexport const colorContext = createContext();\n\nexport default Store;\n","import React from \"react\";\nimport \"../styles/Header.css\";\nimport {Col, Row} from \"react-bootstrap\";\n\nfunction Header(props) {\n  return (\n    <Row>\n      <Col>\n        <h1>PoKeColor</h1>\n      </Col>\n    </Row>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"../styles/Pagination.css\";\nimport { Col } from \"react-bootstrap\";\n\nfunction Pagination({ rowsPerPage, totalRows, loadCurrentPage, currentPage }) {\n  const pageNumbers = [];\n  for (let i = 1; i <= Math.ceil(totalRows / rowsPerPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  const getFirstAndLastItem = (number, array) => {\n    if (number === 0) {\n      return 1;\n    }\n    if (number === array.length + 1) {\n      return array.length;\n    }\n    return number;\n  };\n\n  return (\n    <Col sm={12} md={6} className=\"pagination\">\n      <a onClick={() => loadCurrentPage(1)}>first</a>\n\n      <a\n        onClick={() =>\n          loadCurrentPage(getFirstAndLastItem(currentPage - 1, pageNumbers))\n        }\n      >\n        ≪\n      </a>\n\n      <p>\n        page {currentPage} from {pageNumbers.length}\n      </p>\n      <a\n        onClick={() =>\n          loadCurrentPage(getFirstAndLastItem(currentPage + 1, pageNumbers))\n        }\n      >\n        ≫\n      </a>\n      <a onClick={() => loadCurrentPage(pageNumbers.length)}>last</a>\n    </Col>\n  );\n}\n\nexport default Pagination;\n","export const colors = [\r\n    {\r\n        id: 1,\r\n        name: \"black\",\r\n        color: \"#040000\"\r\n    },\r\n    {\r\n        id: 2,\r\n        name: \"blue\",\r\n        color: \"#1b3461\"\r\n    },\r\n    {\r\n        id: 7,\r\n        name: \"purple\",\r\n        color: \"#612655\"\r\n    },\r\n    {\r\n        id: 8,\r\n        name: \"red\",\r\n        color: \"#c31736\"\r\n    },\r\n    {\r\n        id: 3,\r\n        name: \"brown\",\r\n        color: \"#654321\"\r\n    },\r\n    {\r\n        id: 5,\r\n        name: \"green\",\r\n        color: \"#35523c\"\r\n    },\r\n    {\r\n        id: 4,\r\n        name: \"grey\",\r\n        color: \"#626466\"\r\n    },\r\n    {\r\n        id: 10,\r\n        name: \"yellow\",\r\n        color: \"#e4cd05\"\r\n    },\r\n    {\r\n        id: 6,\r\n        name: \"pink\",\r\n        color: \"#e7b3a7\"\r\n    },\r\n    {\r\n        id: 9,\r\n        name: \"white\",\r\n        color: \"#faf4ee\"\r\n    },\r\n];","import React from \"react\";\nimport {Col} from \"react-bootstrap\";\nimport \"../styles/Filtering.css\";\nimport { colors } from \"../colors.js\";\n\nfunction Filtering({ color, setFilterWord, setCurrentPage }) {\n  const colorName = colors.find((element) => {\n    if (color === element.id) return element.name;\n  });\n\n  return (\n    <Col sm={12} md={6} className=\"filtering\">\n      <input\n        type=\"text\"\n        placeholder={`Filter info about ${colorName.name} Pokemons here...`}\n        onChange={(e) => {\n          setFilterWord(e.target.value);\n          setCurrentPage(1);\n        }}\n      />\n    </Col>\n  );\n}\n\nexport default Filtering;\n","import React, {useState} from \"react\";\nimport \"../styles/Sorting.css\";\n\nfunction Sorting({data, setData}) {\n    const [fieldToSort, setFieldToSort] = useState(null);\n    const [sortDirection, setSortDirection] = useState(\"ascending\");\n\n    const sortByField = (field) => {\n        setFieldToSort(field);\n        let sortedData = data.slice().sort((a, b) => {\n            if (a[field] < b[field]) {\n                return sortDirection === \"ascending\" ? -1 : 1;\n            }\n            if (a[field] > b[field]) {\n                return sortDirection === \"ascending\" ? 1 : -1;\n            }\n            return 0;\n        });\n        setData(sortedData);\n\n        sortDirection === \"ascending\"\n            ? setSortDirection(\"descending\")\n            : setSortDirection(\"ascending\");\n    };\n\n    const getSortIndicator = (field) => {\n        return field === fieldToSort ? `active ${sortDirection}` : undefined;\n    };\n\n    return (\n        <div className=\"sorting\">\n            <button\n                type=\"button\"\n                onClick={() => sortByField(\"name\")}\n                className={getSortIndicator(\"name\")}\n            >\n                sort by name\n            </button>\n            <button\n                type=\"button\"\n                onClick={() => sortByField(\"baseExperience\")}\n                className={getSortIndicator(\"baseExperience\")}\n            >\n                sort by base experience\n            </button>\n            <button\n                type=\"button\"\n                onClick={() => sortByField(\"id\")}\n                className={getSortIndicator(\"id\")}\n            >\n                sort by ID\n            </button>\n            <button\n                type=\"button\"\n                onClick={() => sortByField(\"abilities\")}\n                className={getSortIndicator(\"abilities\")}\n            >\n                sort by base ability\n            </button>\n            <button\n                type=\"button\"\n                onClick={() => sortByField(\"types\")}\n                className={getSortIndicator(\"types\")}\n            >\n                sort by base type\n            </button>\n        </div>\n    );\n}\n\nexport default Sorting;\n","import React, {Fragment, useContext, useEffect, useState} from \"react\";\nimport {colorContext, stateContext} from \"./Store\";\nimport Pagination from \"./Pagination\";\nimport Filtering from \"./Filtering\";\nimport Sorting from \"./Sorting\";\nimport \"../styles/PokeContainer.css\";\nimport loader from \"../ring.svg\";\nimport {colors} from \"../colors.js\";\nimport {Col, Row} from \"react-bootstrap\";\n\nfunction PokeContainer(props) {\n    const [state, error, dataPreparing] = useContext(stateContext);\n    const [color] = useContext(colorContext);\n    const [pokeData, setPokeData] = useState(state);\n\n    const [currentPage, setCurrentPage] = useState(1);\n    const [itemsPerPage] = useState(12);\n\n    const [filterWord, setFilterWord] = useState();\n\n    //filtering\n    const filterList = (array) => {\n        let filteredData = Object.values(array);\n        filteredData = filteredData.filter((data) => {\n            return (\n                data.id.toString().search(filterWord.toLowerCase()) !== -1 ||\n                data.name.toLowerCase().search(filterWord.toLowerCase()) !== -1 ||\n                data.baseExperience.toString().search(filterWord.toLowerCase()) !==\n                -1 ||\n                data.types.toString().search(filterWord.toLowerCase()) !== -1 ||\n                data.abilities.toString().search(filterWord.toLowerCase()) !== -1\n            );\n        });\n        setPokeData(filteredData);\n    };\n\n    const loadCurrentPage = (pageNumber) => setCurrentPage(pageNumber);\n\n    // rendering data\n    const listItems = (array) =>\n        array.map((element, index) => <li key={index}>{element}</li>);\n\n    const renderTableData = () => {\n        //pagination\n        const indexOfLastItem = currentPage * itemsPerPage;\n        const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n        const currentItems = pokeData.slice(indexOfFirstItem, indexOfLastItem);\n\n        const colorElement = colors.find((element) => {\n            if (color === element.id) return element.color;\n        });\n\n        const checkIfWhite = () =>\n            colorElement.color === \"#faf4ee\" ? \"#626466\" : \"#fff\";\n\n        return Object.values(currentItems).map((data) => {\n            const {name, id, baseExperience, types, abilities} = data;\n\n            return (\n                <div key={`row ${id}`} className=\"pokeElement\">\n                    <div className=\"flip-card\">\n                        <div className=\"flip-card-inner\">\n                            <div\n                                className=\"flip-card-front\"\n                                style={{backgroundColor: colorElement.color}}\n                            >\n                                <img\n                                    src={`https://pokeres.bastionbot.org/images/pokemon/${id}.png `}\n                                    width=\"200px\"\n                                    height=\"200px\"\n                                    alt=\"pokemon_image\"\n                                    onError={(e) => {\n                                        e.target.onerror = null;\n                                        e.target.src =\n                                            \"https://www.freeiconspng.com/uploads/no-image-icon-15.png\";\n                                    }}\n                                />\n                                <h2 style={{color: checkIfWhite()}}>{name}</h2>\n                            </div>\n                            <div className=\"flip-card-back\">\n                                <h2>{baseExperience}</h2>\n                                <p>base experience</p>\n                                <p>Pokedex ID: {id}</p>\n                                <div className=\"type-abilities\">\n                                    <p>Abilities: {listItems(abilities)}</p>\n                                </div>\n                                <div className=\"type-abilities\">\n                                    <p>Types: {listItems(types)}</p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            );\n        });\n    };\n\n    useEffect(() => {\n        filterList(state);\n    }, [filterWord]);\n\n    useEffect(() => {\n        if (state[0]) {\n            setPokeData(state);\n            setCurrentPage(1);\n        }\n    }, [state]);\n\n    //preventing from render when server doesn't respond\n    if (error) {\n        return (\n            <div>\n                <p>Retrieving data was unsuccessful. Check internet connection.</p>\n            </div>\n        );\n    }\n\n    //preventing from render when data isn't prepared yet\n    if (dataPreparing) {\n        return (\n            <div className=\"dataPreparing\">\n                <img src={loader} alt=\"ball\" height=\"100px\" width=\"100px\"/>\n                <p>Preparing your data. Please wait.</p>\n            </div>\n        );\n    }\n\n    return (\n        <Fragment>\n            <Row>\n                <Filtering\n                    color={color}\n                    setFilterWord={setFilterWord}\n                    setCurrentPage={setCurrentPage}\n                />\n                <Pagination\n                    rowsPerPage={itemsPerPage}\n                    totalRows={pokeData.length}\n                    loadCurrentPage={loadCurrentPage}\n                    currentPage={currentPage}\n                />\n            </Row>\n            <Row>\n                <Col>\n                    <Sorting data={pokeData} setData={setPokeData}/>\n                </Col>\n            </Row>\n            <Row>\n                <Col>{renderTableData()}</Col>\n            </Row>\n        </Fragment>\n    );\n}\n\nexport default PokeContainer;\n","import React, { useContext } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport \"../styles/ButtonContainer.css\";\nimport { colorContext } from \"./Store\";\nimport { colors } from \"../colors.js\";\nimport {Col, Row} from \"react-bootstrap\";\n\nfunction ButtonContainer(props) {\n  const [color, setColor] = useContext(colorContext);\n\n  const buttonList = Object.values(colors).map((currentElement, index) => {\n    const checkIfWhite = () =>\n      currentElement.color === \"#faf4ee\" ? \"#626466\" : \"#fff\";\n    return (\n      <Button\n        variant=\"primary\"\n        size=\"lg\"\n        key={index}\n        style={{\n          backgroundColor: currentElement.color,\n          borderColor: currentElement.color,\n          borderRadius: 0,\n          color: checkIfWhite(),\n        }}\n        onClick={() => setColor(currentElement.id)}\n      >\n        {currentElement.name}{\" \"}\n      </Button>\n    );\n  });\n\n  return (\n    <Row>\n      <Col className=\"buttonContainer\">\n        <h4>Choose color of Pokemons you want to see:</h4>\n        {buttonList}\n      </Col>\n    </Row>\n  );\n}\n\nexport default ButtonContainer;\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Store from \"./Store\";\nimport Header from \"./Header\";\nimport PokeContainer from \"./PokeContainer\";\n\nimport \"../styles/App.css\";\nimport ButtonContainer from \"./ButtonContainer\";\nimport { Container } from \"react-bootstrap\";\n\nfunction App() {\n  return (\n    <Store>\n      <Container className=\"App\">\n          <Header />\n          <ButtonContainer />\n          <PokeContainer />\n      </Container>\n    </Store>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}